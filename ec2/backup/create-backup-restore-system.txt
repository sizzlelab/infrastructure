# make sure ec2-api-tools are installed

# as cos user:
mkdir ~/.aws
chmod 700 .aws

# scp X509 certificate and private key to server
scp .aws/cert-ATW57ZBEHKPMQNTZNWTF7XORQPREVTCE.pem cos@46.137.99.187:/home/cos/.aws
scp .aws/pk-ATW57ZBEHKPMQNTZNWTF7XORQPREVTCE.pem cos@46.137.99.187:/home/cos/.aws

# set needed env in .profile 
----
# Set up the necessary environment for ec2 tools to work
# source this file into your current shell
#
# see: http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/

# JAVA
export JAVA_HOME=/usr/lib/jvm/java-6-openjdk/

# EC2 access credentials
export EC2_PRIVATE_KEY=~/.aws/pk-ATW57ZBEHKPMQNTZNWTF7XORQPREVTCE.pem
export EC2_CERT=~/.aws/cert-ATW57ZBEHKPMQNTZNWTF7XORQPREVTCE.pem

# set the european endpoint
export EC2_URL=https://ec2.eu-west-1.amazonaws.com
----


# create a local mysql user for making backups
CREATE USER 'snapshot'@'localhost' IDENTIFIED BY 'some_pass';
GRANT ALL PRIVILEGES ON *.* TO 'snapshot'@'localhost';

# create mysql credentials file
mkdir ~/.mysql
chmod 700 !$
vi ~/.mysql/ec2-snapshot-mysql
--
[client]
host=localhost
user=snapshot
password=some_pass
---
chmod 600 !$

# example invocation
sudo ec2-consistent-snapshot --aws-credentials-file ~/.aws/sizl-aws@hiit.fi --region eu-west-1 --freeze-filesystem /data --mysql --mysql-defaults-file ~/.mysql/ec2-snapshot-mysql.cnf vol-f0109d99

# install cron job for daily backup under cos user
# Note 23:10 UTC is chosen as it would be approx 16:10 on US west coast 
crontab -e
---
MAILTO="konker@gmail.com"

# daily backup
23 10 * * * /home/cos/bin/daily-backup.sh
---

# create database dumper slave
# Ubuntu 10.10 32bit instance backed ami: ami-7e5c690a
# Ubuntu 10.10 32bit ebs backed ami: ami-038bbc77
ec2-run-instances ami-038bbc77 -k sizl-ubuntu1 -g sizl-web -z eu-west-1b -t m1.small

sudo apt-get update && sudo apt-get upgrade -y

# enable multiverse in /etc/apt/sources.list
...

sudo apt-get install -y git
sudo apt-get install -y mysql-server
sudo apt-get install -y libmysqlclient-dev
sudo apt-get install -y ntp
sudo apt-get install -y ec2-api-tools
sudo apt-get install -y ruby
sudo apt-get install -y postfix
sudo apt-get install -y unzip

# add a cos user
sudo adduser cos
...

# add cos user to admin group
sudo usermod -G admin cos

# create .ssh
sudo mkdir /home/cos/.ssh
sudo chown cos.cos /home/cos/.ssh
sudo chmod 700 /home/cos/.ssh
sudo vi /home/cos/.ssh/authorized_keys
---add public keys---
sudo chmod 600 /home/cos/.ssh/authorized_keys
sudo chown cos.cos /home/cos/.ssh/authorized_keys


# install S3cmd
# see: http://s3tools.org/repositories#note-deb
wget -O- -q http://s3tools.org/repo/deb-all/stable/s3tools.key | sudo apt-key add -
sudo wget -O/etc/apt/sources.list.d/s3tools.list http://s3tools.org/repo/deb-all/stable/s3tools.list
sudo apt-get update && sudo apt-get install s3cmd

# configure s3cmd (creates ~/.s3cfg)
s3cmd --configure

# install AWS AMI tools
# see: http://aws.amazon.com/developertools/368?_encoding=UTF8&jiveRedirect=1
wget http://s3.amazonaws.com/ec2-downloads/ec2-ami-tools.zip
# unzip and rename unzipped dir to ec2-ami-tools


# create .aws (log in as cos)
mkdir .aws
cd .aws
-- copy over x509 cert and pk from main server ---
chmod 600 *
chmod 700 .

# add ec2 stuff to .profile
---
# JAVA
export JAVA_HOME=/usr/lib/jvm/java-6-openjdk/

# EC2 access credentials
export EC2_PRIVATE_KEY=~/.aws/pk-ATW57ZBEHKPMQNTZNWTF7XORQPREVTCE.pem
export EC2_CERT=~/.aws/cert-ATW57ZBEHKPMQNTZNWTF7XORQPREVTCE.pem
export AWS_CREDENTIALS=~/.aws/sizl-aws@hiit.fi

# EC2 AMI tools
export EC2_AMITOOL_HOME=~/ec2-ami-tools

# set the european endpoint
export EC2_URL=https://ec2.eu-west-1.amazonaws.com
----

# create bin directory
mkdir bin

# edit /etc/rc.local
sudo vi /etc/rc.local 
--
su - cos -c "/home/cos/bin/dump-exec.sh"
exit 0
--

# create dumper mysql user with appropriate permissions
CREATE USER 'dumper'@'localhost' IDENTIFIED BY 'XXX';
GRANT REPLICATION CLIENT, LOCK TABLES, SELECT, SUPER ON *.* TO 'dumper'@'localhost' IDENTIFIED BY 'XXX';
FLUSH PRIVILEGES;


# create a ~/.my.cnf
---
[client]
host=localhost
user=dumper
password=<password>
---
chmod 600 .my.cnf

# create S3 bucket named sizl-db-dumps (using web ui)
#..

# create dump scripts
#


# allow cos to shutdown without password
sudo visudo
----

# Cmnd alias specification
Cmnd_Alias      SHUTDOWN_CMDS = /sbin/shutdown

...

# admins may exec shutdown commands as root without a password
%admin ALL=(ALL) NOPASSWD: SHUTDOWN_CMDS

---


# bundle the ami
# create bin/create-bundle.sh
---
#!/bin/bash

. /home/cos/.profile
ec2-ami-tools/bin/ec2-bundle-vol -u 7747-2178-7864 -c /home/cos/.aws/cert-ATW57ZBEHKPMQNTZNWTF7XORQPREVTCE.pem -k /home/cos/.aws/pk-ATW57ZBEHKPMQNTZNWTF7XORQPREVTCE.pem -r i386 -d /mnt -e /mnt
---

# upload the ami
 ec2-ami-tools/bin/ec2-upload-bundle -b sizl-ami-dumper -a $AWSID -s $AWSSECRET -m /mnt/image.manifest.xml

# register the ami
ec2-register sizl-ami-dumper/image.manifest.xml
IMAGE   ami-9399aee7
        ami-1b7e486f

# start the dumper
ec2-run-instances ami-1b7e486f -k sizl-ubuntu1 -g sizl-web -z eu-west-1b -t m1.small


# ------------------------------------------------------------------------------
# restore
restore.py -h

Usage: restore.py [options]

Options:
  -h, --help            show this help message and exit
  -p RESTORE_PERIOD, --restore-period=RESTORE_PERIOD
                        Which backup to restore to, e.g. "Mon", "Tue",
                        "Weekly1", etc
  -t INSTANCE_TYPE, --instance-type=INSTANCE_TYPE
                        EC2 instance type for the restored instance, e.g.
                        "c1.medium"
  -i IP_ADDRESS, --ip-address=IP_ADDRESS
                        IP address which will be associated with the new
                        instance. Probably the elastic IP address of the
                        failed instance.

      
This will:
    - create an AMI from the sys snapshot
    - start an instance of type INSTANCE_TYPE using this ami
    - create a new volume from the dat snapshot
    - attach this new volume to the new instance as /dev/sdh
    - associate IP_ADDRESS with the new instance

It is left as a manual task to the sysadmin to terminate/delete uneeded resources after this has completed, or in the case that the restore fails or is aborted.
