(Based on the Create-base-sizl-ami-and-db.txt)

1) Update server

# enable multiverse in /etc/apt/sources.list (this seems to be enabled by default at heztner)
...

sudo apt-get update && sudo apt-get upgrade -y

2) create users

adduser name

add to sudoers:

usermod -G admin name

3) Install server software (remember to set mysql root password)

sudo apt-get install -y git-core
sudo apt-get install -y build-essential
sudo apt-get install -y mysql-server
sudo apt-get install -y libmysqlclient-dev
sudo apt-get install -y xfsprogs              

sudo apt-get install -y apache2
sudo apt-get install -y apache2-prefork-dev    

sudo apt-get install -y libopenssl-ruby

## already installed at this point?
#sudo apt-get install -y libssl-dev                     (not yet installed)
##


sudo apt-get install -y libcurl4-openssl-dev            

sudo apt-get install -y ruby
sudo apt-get install -y ruby-dev              
sudo apt-get install -y rubygems



sudo apt-get install -y ntp                             (not yet installed)

sudo apt-get install -y postfix                         (not yet installed)

# add gem bin dir to global path.
# this is horrible but no other way has been yet found!
# note: might be worth checking the dir with `gem env`
##sudo vi /etc/profile.d/gem_bin_path.sh
sudo vi /etc/environment
---
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/var/lib/gems/1.8/bin"
---

sudo apt-get install -y imagemagick
sudo apt-get install -y libmagickcore-dev                       
sudo apt-get install -y libmagickwand3                          (not found???)
sudo apt-get install -y graphicsmagick-libmagick-dev-compat     (not yet installed)
sudo apt-get install -y libmagickwand-dev                       

sudo apt-get install -y sphinxsearch

4) Set up passenger

sudo gem install passenger --no-rdoc --no-ri
sudo /var/lib/gems/1.8/bin/passenger-install-apache2-module

sudo vi /etc/apache2/mods-available/passenger.load
LoadModule passenger_module /var/lib/gems/1.8/gems/passenger-3.0.7/ext/apache2/mod_passenger.so

sudo vi /etc/apache2/mods-available/passenger.conf
<IfModule mod_passenger.c>
   PassengerRoot /var/lib/gems/1.8/gems/passenger-3.0.7
   PassengerRuby /usr/bin/ruby1.8
</IfModule>


# (check passenger versions of the above)

# enable the module and restart apache
cd /etc/apache2/mods-enabled
sudo ln -s ../mods-available/passenger.conf .
sudo ln -s ../mods-available/passenger.load .
sudo apache2ctl restart


5) Install Bundler and whenever and i8n
sudo gem install rubygems-update --no-rdoc --no-ri
sudo /var/lib/gems/1.8/bin/update_rubygems

sudo gem install bundler --no-rdoc --no-ri
sudo gem install rake --no-rdoc --no-ri
sudo gem install whenever --no-rdoc --no-ri                  
sudo gem install i18n --no-rdoc --no-ri             



9) Add Kassi user
sudo adduser kassi

# add to the admin group for sudo
sudo usermod -G admin kassi

# create .ssh
# create .ssh
sudo mkdir /home/kassi/.ssh
sudo chown kassi.kassi /home/kassi/.ssh
sudo chmod 700 /home/kassi/.ssh
sudo vi /home/kassi/.ssh/authorized_keys
---add public keys---
sudo chmod 600 /home/kassi/.ssh/authorized_keys
sudo chown kassi.kassi /home/kassi/.ssh/authorized_keys



9b) add /opt/asi directory
sudo mkdir /opt/asi
sudo chown kassi.kassi /opt/asi


### Install ASI with Capistrano

# set correct parameters in deploy.rb for the server:

# NOTE: remember to add extra parameters to cap commands if needed (e.g. bundle exec cap deploy DEPLOY_ENV=amazon BRANCH=communities)

# create releases and shared dirs with cap
cap deploy:setup DEPLOY_ENV=hetz BRANCH=rails3

# check that permissions are ok
cap deploy:check DEPLOY_ENV=hetz BRANCH=rails3

# Upload the code
## cap deploy:update_code DEPLOY_ENV=hetz BRANCH=rails3 (this is probably not needed step)
cap deploy:update DEPLOY_ENV=hetz BRANCH=rails3

# Fix config.yml and database.yml
cp /opt/asi/current/config/config.example.yml /opt/asi/shared/config/config.yml
cp /opt/asi/current/config/database.example.yml /opt/asi/shared/config/database.yml

vi database.yml # Add at least password to production db settings
vi config.yml # Look it through and set correct values. Probably helpful to use existing production server config.yml as a model here

# Create DBs, at least production and test (needed by rapidoc)
CREATE DATABASE asi_test CHARACTER SET utf8 COLLATE utf8_general_ci; 
CREATE DATABASE asi_production CHARACTER SET utf8 COLLATE utf8_general_ci;
GRANT all privileges ON asi_production.* TO 'asi'@'localhost' IDENTIFIED BY 'password';
GRANT all privileges ON asi_test.* TO 'asi'@'localhost' IDENTIFIED BY 'password';   

# Build the db structure
cd /opt/kassi/current
rake RAILS_ENV=production db:migrate
rake RAILS_ENV=test db:migrate

# Run cap deploy
cap deploy DEPLOY_ENV=hetz BRANCH=rails3


# INSTALL KASSI


14) Create directory for Kassisudo mkdir /opt/kassi
sudo chown kassi.kassi /opt/kassi


15) Add database and kassi mysql user

mysql -u root -p

CREATE DATABASE kassi_production CHARACTER SET utf8 COLLATE utf8_general_ci;
GRANT all privileges ON kassi_production.* TO 'kassi'@'localhost' IDENTIFIED BY 'password_here';


16) Install with Capistrano

# set correct parameters in deploy.rb for the server:
set :host, "46.137.99.187"
set :user, "kassi"
set :deploy_to, "/opt/kassi"

# NOTE: remember to add extra parameters to cap commands if needed (e.g. bundle exec cap deploy DEPLOY_ENV=amazon BRANCH=communities)

# create releases and shared dirs with cap
cap deploy:setup (NOTE: this might fail to some sphinx isssues but that doesn't matter at this point)

# check that permissions are ok
cap deploy:check

# Create some dirs manually (as kassi user)
mkdir vendor_bundle

# Try installing the code (it should fail because no config.yml found, however the code gets uploaded to the server)
cap deploy:update DEPLOY_ENV=hetz BRANCH=communities

# Fix config.yml and database.yml
cp /opt/kassi/current/config/config.example.yml /opt/kassi/shared/system/config.yml
cp /opt/kassi/current/config/database.example.yml /opt/kassi/shared/system/database.yml

Remember also to add the Kassi client account to the ASI db

vi database.yml # Add at least password to production db settings
vi config.yml # Look it through and set correct values. Probably helpful to use existing production server config.yml as a model here

# Build the db structure
cd /opt/kassi/current
rake RAILS_ENV=production db:schema:load

# Run cap deploy again (this time it should succeed)
cap deploy

17) Configure Apache

#add to /etc/hosts the following.
127.0.0.1 asi.kassi.eu

vi /etc/apache2/sites-available/asi
vi /etc/apache2/sites-available/kassi
cd /etc/apache2/sites-enabled
ln -s ../sites-available/asi
ln -s ../sites-available/kassi


# and restart it afterwards
sudo apache2ctl restart

18) Install memcached

sudo apt-get install memcached

19) copy db and shared/system/images content and log file from old server if needed

20) Set up automatic backup: http://www.problogdesign.com/how-to/automatic-amazon-s3-backups-on-ubuntu-debian/
