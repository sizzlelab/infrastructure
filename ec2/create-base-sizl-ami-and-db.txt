Steps to create a base AMI for OtaSizzle,
including an EBS volume specifically for the database.
-------------------------------------------------------------------------------
Konrad Markus <konker@gmail.com>

Assumptions:
- You have the ec2-tools set up and the correct X.509 cert/key configured to use them.
    - You should be able to source ec2-tools-env.sh
    - The following assumes that $EC2_URL is set correctly for the region you want.
    - You have a ~/.aws directory where you can store keys, etc


1) Create keypair for launching the instance named 'sizl-ubuntu1'
    ec2-create-keypair sizl-ubuntu1 > ~/.aws/sizl-ubuntu1.pem
    chmod 600 ~/.aws/sizl-ubuntu1.pem

2) Create a security group named 'sizl-web'
    export EC2_GROUP_NAME=sizl-web

    ec2-create-group -d "Security Group for Sizl web facing application servers" $EC2_GROUP_NAME

    /* these 'internal' permissions taken from the default security group */
    ec2-authorize $EC2_GROUP_NAME -P tcp -p 0-65535 -o $EC2_GROUP_NAME
    ec2-authorize $EC2_GROUP_NAME -P udp -p 0-65535 -o $EC2_GROUP_NAME
    ec2-authorize $EC2_GROUP_NAME -P icmp -t '-1:-1' -o $EC2_GROUP_NAME

    /* authorize ingress ports (ssh, http, https, smtp, mysql) */
    ec2-authorize $EC2_GROUP_NAME -p 22
    ec2-authorize $EC2_GROUP_NAME -p 80
    ec2-authorize $EC2_GROUP_NAME -p 443
    ec2-authorize $EC2_GROUP_NAME -p 25
    ec2-authorize $EC2_GROUP_NAME -p 3306 -s 10.0.0.0/8

3) Bring up an instance with:
    - ubuntu EBS backed 10.10 32bit base AMI from Canonical
        - see: http://uec-images.ubuntu.com/releases/10.10/release/
    - using keypair 'sizl-ubuntu1'
    - using security group 'sizl-web'
    - in the eu-west-1b availability zone
    - using instance type <instance.type>

    ec2-run-instances ami-fb9ca98f -k sizl-ubuntu1 -g sizl-web -z eu-west-1b -t <instance.type>

3a) Allocate and associate elastic IP address
    ec2-allocate-address
    ec2-describe-instances
    ec2-associate-address 46.137.99.187 -i i-83be19f5
------------
3b) Get host name and test ssh into server:
    ec2-describe-instances
    ...
    ssh -i ~/.aws/sizl-ubuntu1.pem -l ubuntu ec2-XX-XXX-XX-XX.eu-west-1.compute.amazonaws.com
    ssh -i ~/.aws/sizl-ubuntu1.pem -l ubuntu 46.137.99.187
------------

4) Update server

# enable multiverse in /etc/apt/sources.list
...

sudo apt-get update && sudo apt-get upgrade -y

5) Install server software (remember to set mysql root password)

sudo apt-get install -y git
sudo apt-get install -y mysql-server
sudo apt-get install -y libmysqlclient-dev
sudo apt-get install -y xfsprogs

sudo apt-get install -y apache2
sudo apt-get install -y apache2-prefork-dev

## already installed at this point?
#sudo apt-get install -y libapr1-dev
#sudo apt-get install -y libaprutil1-dev
#sudo apt-get install -y libssl-dev
##

sudo apt-get install -y libcurl4-openssl-dev

sudo apt-get install -y ruby
sudo apt-get install -y ruby-dev
sudo apt-get install -y rubygems

sudo apt-get install -y ec2-api-tools

sudo apt-get install -y ntp

sudo apt-get install -y postfix

# add gem bin dir to global path.
# this is horrible but no other way has been yet found!
# note: might be worth checking the dir with `gem env`
##sudo vi /etc/profile.d/gem_bin_path.sh
sudo vi /etc/environment
---
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/var/lib/gems/1.8/bin"
---

sudo apt-get install -y imagemagick
sudo apt-get install -y libmagickcore-dev
sudo apt-get install -y libmagickwand3
sudo apt-get install -y graphicsmagick-libmagick-dev-compat
sudo apt-get install -y libmagickwand-dev

sudo apt-get install -y sphinxsearch

5b) Set up passenger

sudo gem install passenger --no-rdoc --no-ri
sudo /var/lib/gems/1.8/bin/passenger-install-apache2-module

sudo vi /etc/apache2/mods-available/passenger.load
LoadModule passenger_module /var/lib/gems/1.8/gems/passenger-3.0.6/ext/apache2/mod_passenger.so

sudo vi /etc/apache2/mods-available/passenger.conf
<IfModule mod_passenger.c>
   PassengerRoot /var/lib/gems/1.8/gems/passenger-3.0.6
   PassengerRuby /usr/bin/ruby1.8
</IfModule>

# (check passenger versions of the above)

# enable the module and restart apache
cd /etc/apache2/mods-enabled
sudo ln -s ../mods-available/passenger.conf .
sudo ln -s ../mods-available/passenger.load .
sudo apache2ctl restart


5c) Install Bundler and whenever and i8n
sudo gem install bundler --no-rdoc --no-ri
sudo gem install whenever --no-rdoc --no-ri
sudo gem install i18n --no-rdoc --no-ri

--

6) Create and attach EBS volume for the database
    ec2-create-volume -z eu-west-1b -s 10
(get isntance id using ec2-describe-instances)
(get volume id using ec2-describe-volumes)

    ec2-attach-volume -d /dev/sdh -i <i-XXXXXXXX> <vol-YYYYYYYY>


7) Create an XFS filesystem for the database volume
(see: http://aws.amazon.com/articles/1663?_encoding=UTF8&jiveRedirect=1)

# add the xfs module to the kernel
grep -q xfs /proc/filesystems || sudo modprobe xfs

# make it into an xfs filesystem
sudo mkfs.xfs /dev/sdh

# add to fstab so it mounts automatically
sudo vi /etc/fstab
/dev/sdh        /data   xfs     noatime 0 0

# create mount point and mount
sudo mkdir -m 000 /data
sudo mount /data


7b) Configure mysql to use new volume:

sudo stop mysql

sudo mkdir /data/etc /data/lib /data/log

# move mysql directories on to EBS volume
sudo mv /etc/mysql     /data/etc/
sudo mv /var/lib/mysql /data/lib/
sudo mv /var/log/mysql /data/log/

# re-create empty mysql directories to act as mount points
sudo mkdir /etc/mysql
sudo mkdir /var/lib/mysql
sudo mkdir /var/log/mysql

# mount EBS volume dirs on to empty mysql mount points
sudo vi /etc/fstab
/data/etc/mysql /etc/mysql     none bind
/data/lib/mysql /var/lib/mysql none bind
/data/log/mysql /var/log/mysql none bind

sudo mount /etc/mysql
sudo mount /var/lib/mysql
sudo mount /var/log/mysql

# bring the srever back up
sudo start mysql

8) Install snapshot tool:
sudo add-apt-repository ppa:alestic
sudo apt-get update
sudo apt-get install ec2-consistent-snapshot


9) Add cos user
useradd -d /home/cos -s /bin/bash -m cos

# add to the admin group for sudo
sudo usermod -G admin cos


# create .ssh
sudo mkdir /home/cos/.ssh
sudo chown cos.cos /home/cos/.ssh
sudo chmod 700 /home/cos/.ssh
sudo vi /home/cos/.ssh/authorized_keys
---add public keys---
sudo chmod 600 /home/cos/.ssh/authorized_keys
sudo chown cos.cos /home/cos/.ssh/authorized_keys

# add other users:
kmarkus
jturunen
sktoiva
amvirola
jomakko2

# for each one:
sudo adduser <username>
...

sudo usermod -G admin <username>

sudo su - <username>
cd
mkdir .ssh
#sudo chown <username>.<username> /home/<username>/.ssh
chmod 700 .ssh
vi .ssh/authorized_keys
---add public keys---
chmod 600 .ssh/authorized_keys





9b) add /opt/asi directory
sudo mkdir /opt/asi
sudo chown cos.cos /opt/asi


===log in as cos===
10) install ASI manually into /opt/asi/
cd /opt/asi
mkdir releases shared
cd /opt/asi/releases

# note branch may not be needed..
git clone -b rails3 git://github.com/sizzlelab/asi.git

# prepare the shared directory
cd /opt/asi/shared
mkdir bundle config db log tmp
mkdir db/sphinx
cp ../../releases/manual/config/database.example.yml database.yml
vi database.yml
-- edit passwords --

cp ../../releases/manual/config/config.example.yml config.yml
vi config.yml
-- edit appropriately --

vi session_secret
-- add secret --

cd /opt/asi/releases/manual
vi install.sql
-- edit passwords --

# install databases/users
mysql -uroot -p < install.sql

# production mode
export RAILS_ENV=production

# bundler
/var/lib/gems/1.8/bin/bundle install --gemfile /opt/asi/releases/manual/Gemfile --path /opt/asi/shared/bundle --deployment --without development

# db migrate
cd /opt/asi/releases/manual
/var/lib/gems/1.8/bin/rake db:migrate

# symlinks
ln -s /opt/asi/shared/config/database.yml /opt/asi/releases/manual/config/database.yml 
ln -s /opt/asi/shared/config/config.yml /opt/asi/releases/manual/config/config.yml 
ln -s /opt/asi/shared/config/session_secret /opt/asi/releases/manual/config/session_secret 
rm -rf /opt/asi/releases/manual/log
ln -s /opt/asi/shared/log /opt/asi/releases/manual/log
ln -s /opt/asi/releases/manual /opt/asi/current

# rapidocs (runs in test mode, so migration need to be run)
cd /opt/asi/releases/manual
export RAILS_ENV=test
/var/lib/gems/1.8/bin/rake db:migrate
script/rapidoc/generate

/*
9) Create AMI from snapshot of root volume:
TODO?

10) Take a snapshot of the root volume:
TODO?

11) Take a snapshot of the db volume:
TODO

*/

12) deploy ASI
cap deploy ASI?


# INSTALL KASSI

13) Add kassi user
useradd -d /home/kassi -s /bin/bash -m kassi

# add to the admin group for sudo
sudo usermod -G admin kassi

# create .ssh
sudo mkdir /home/kassi/.ssh
sudo chown kassi.kassi /home/kassi/.ssh
sudo chmod 700 /home/kassi/.ssh
sudo vi /home/kassi/.ssh/authorized_keys
---add public keys---
sudo chmod 600 /home/cos/.ssh/authorized_keys

14) Create directory for Kassi
sudo mkdir /opt/kassi
sudo chown kassi.kassi /opt/kassi

15) Add database and kassi mysql user

mysql -u root -p

CREATE DATABASE kassi_production CHARACTER SET utf8 COLLATE utf8_general_ci;
GRANT all privileges ON kassi_production.* TO 'kassi'@'localhost' IDENTIFIED BY 'password_here';


16) Install with Capistrano

# set correct parameters in deploy.rb for the server:
set :host, "46.137.99.187"
set :user, "kassi"
set :deploy_to, "/opt/kassi"

# NOTE: remember to add extra parameters to cap commands if needed (e.g. bundle exec cap deploy DEPLOY_ENV=amazon BRANCH=communities)

# create releases and shared dirs with cap
cap deploy:setup

# check that permissions are ok
cap deploy:check

# Create some dirs manually (as kassi user)
mkdir vendor_bundle

# Try installing the code (it should fail because no config.yml found, however the code gets uploaded to the server)
cap deploy

# Fix config.yml and database.yml
cp /opt/kassi/current/config/config.example.yml /opt/kassi/shared/system/config.yml
cp /opt/kassi/current/config/database.example.yml /opt/kassi/shared/system/database.yml

vi database.yml # Add at least password to production db settings
vi config.yml # Look it through and set correct values. Probably helpful to use existing production server config.yml as a model here

# Build the db structure
cd /opt/kassi/current
rake RAILS_ENV=production db:schema:load

# Run cap deploy again (this time it should succeed)
cap deploy

17) Configure Apache

vi /etc/apache2/sites-available/kassi
cd /etc/apache2/sites-enabled
ln -s ../sites-available/kassi

# and restart it afterwards
sudo /etc/init.d/apache2 restart

18) Install memcached

sudo apt-get install memcached

19) copy db and shared/system/images content from old server if needed


---
TODO:
- configure postfix
